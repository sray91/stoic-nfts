{"ast":null,"code":"import _asyncToGenerator from\"/Users/swanagan/projects/stoic-traits/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/swanagan/projects/stoic-traits/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/swanagan/projects/stoic-traits/node_modules/@babel/runtime/regenerator/index.js\";import React,{useEffect,useState}from'react';import'./styles/App.css';import{ethers}from'ethers';import{Loading}from'react-loading-dot';import myEpicNft from'./utils/MyEpicNFT.json';import twitterLogo from'./assets/twitter-logo.svg';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var OPENSEA_LINK='https://testnets.opensea.io/collection/stoicnft-eimjddcifq';var TOTAL_MINT_COUNT=55;var TWITTER_LINK='https://twitter.com/Swanagan';var TWITTER_HANDLE='eewatchguy.eth';// I moved the contract address to the top for easy access.\nvar CONTRACT_ADDRESS='0x9905Bf40e406E44f436f60A8b08BfeF667Ac6C1a';var App=function App(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),currentAccount=_useState2[0],setCurrentAccount=_useState2[1];var _useState3=useState('0'),_useState4=_slicedToArray(_useState3,2),mintedSoFar=_useState4[0],setMintedSoFar=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isLoading=_useState6[0],setIsLoading=_useState6[1];var checkIfWalletIsConnected=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _window,ethereum,accounts,account,chainId,rinkebyChainId;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_window=window,ethereum=_window.ethereum;if(ethereum){_context.next=6;break;}console.log('Make sure you have metamask!');return _context.abrupt(\"return\");case 6:console.log('We have the ethereum object',ethereum);case 7:_context.next=9;return ethereum.request({method:'eth_accounts'});case 9:accounts=_context.sent;if(accounts.length!==0){account=accounts[0];console.log('Found an authorized account:',account);setCurrentAccount(account);// Setup listener! This is for the case where a user comes to our site\n// and ALREADY had their wallet connected + authorized.\nsetupEventListener();}else{console.log('No authorized account found');}_context.next=13;return ethereum.request({method:'eth_chainId'});case 13:chainId=_context.sent;console.log('Connected to chain '+chainId);// String, hex code of the chainId of the Rinkebey test network\nrinkebyChainId='0x4';if(chainId!==rinkebyChainId){alert('You are not connected to the Rinkeby Test Network!');}case 17:case\"end\":return _context.stop();}}},_callee);}));return function checkIfWalletIsConnected(){return _ref.apply(this,arguments);};}();var connectWallet=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _window2,ethereum,accounts;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_window2=window,ethereum=_window2.ethereum;if(ethereum){_context2.next=5;break;}alert('Get MetaMask!');return _context2.abrupt(\"return\");case 5:_context2.next=7;return ethereum.request({method:'eth_requestAccounts'});case 7:accounts=_context2.sent;console.log('Connected',accounts[0]);setCurrentAccount(accounts[0]);// Setup listener! This is for the case where a user comes to our site\n// and connected their wallet for the first time.\nsetupEventListener();_context2.next=16;break;case 13:_context2.prev=13;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);case 16:case\"end\":return _context2.stop();}}},_callee2,null,[[0,13]]);}));return function connectWallet(){return _ref2.apply(this,arguments);};}();// Setup our listener.\nvar setupEventListener=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _window3,ethereum,provider,signer,connectedContract;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:// Most of this looks the same as our function askContractToMintNft\ntry{_window3=window,ethereum=_window3.ethereum;if(ethereum){// Same stuff again\nprovider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();connectedContract=new ethers.Contract(CONTRACT_ADDRESS,myEpicNft.abi,signer);// THIS IS THE MAGIC SAUCE.\n// This will essentially \"capture\" our event when our contract throws it.\n// If you're familiar with webhooks, it's very similar to that!\nconnectedContract.on('NewEpicNFTMinted',function(from,tokenId){console.log(from,tokenId.toNumber());alert(\"Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/\".concat(CONTRACT_ADDRESS,\"/\").concat(tokenId.toNumber()));});console.log('Setup event listener!');}else{console.log(\"Ethereum object doesn't exist!\");}}catch(error){console.log(error);}case 1:case\"end\":return _context3.stop();}}},_callee3);}));return function setupEventListener(){return _ref3.apply(this,arguments);};}();var askContractToMintNft=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var _window4,ethereum,provider,signer,connectedContract,nftTxn;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_window4=window,ethereum=_window4.ethereum;if(!ethereum){_context4.next=19;break;}provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();connectedContract=new ethers.Contract(CONTRACT_ADDRESS,myEpicNft.abi,signer);setIsLoading(true);console.log('Going to pop wallet now to pay gas...');_context4.next=10;return connectedContract.makeAnEpicNFT();case 10:nftTxn=_context4.sent;console.log('Mining...please wait.');_context4.next=14;return nftTxn.wait();case 14:console.log(nftTxn);console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/\".concat(nftTxn.hash));setIsLoading(false);_context4.next=20;break;case 19:console.log(\"Ethereum object doesn't exist!\");case 20:_context4.next=25;break;case 22:_context4.prev=22;_context4.t0=_context4[\"catch\"](0);console.log(_context4.t0);case 25:case\"end\":return _context4.stop();}}},_callee4,null,[[0,22]]);}));return function askContractToMintNft(){return _ref4.apply(this,arguments);};}();var getTotalNFTsMintedSoFar=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var _window5,ethereum,provider,signer,connectedContract,nft;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;_window5=window,ethereum=_window5.ethereum;if(!ethereum){_context5.next=12;break;}provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();connectedContract=new ethers.Contract(CONTRACT_ADDRESS,myEpicNft.abi,signer);_context5.next=8;return connectedContract.getTotalNFTsMintedSoFar();case 8:nft=_context5.sent;setMintedSoFar(nft.toNumber());_context5.next=13;break;case 12:console.log(\"Ethereum object doesn't exist!\");case 13:_context5.next=18;break;case 15:_context5.prev=15;_context5.t0=_context5[\"catch\"](0);console.log(_context5.t0);case 18:case\"end\":return _context5.stop();}}},_callee5,null,[[0,15]]);}));return function getTotalNFTsMintedSoFar(){return _ref5.apply(this,arguments);};}();useEffect(function(){checkIfWalletIsConnected();},[]);var renderNotConnectedContainer=function renderNotConnectedContainer(){return/*#__PURE__*/_jsx(\"button\",{onClick:connectWallet,className:\"cta-button connect-wallet-button\",children:\"Connect to Wallet\"});};var fireSomeFunctions=function fireSomeFunctions(){return askContractToMintNft(),getTotalNFTsMintedSoFar();};var renderMintUI=function renderMintUI(){return/*#__PURE__*/_jsx(\"button\",{onClick:fireSomeFunctions,className:\"cta-button connect-wallet-button\",children:\"Mint NFT\"});};return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header-container\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"header gradient-text\",children:\"Stoic Traits NFT\"}),/*#__PURE__*/_jsx(\"p\",{className:\"sub-text\",children:\"Each unique. Each stoic. Discover your NFT today.\"}),currentAccount===''?renderNotConnectedContainer():renderMintUI()]}),/*#__PURE__*/_jsx(\"div\",{className:\"body-container\",children:/*#__PURE__*/_jsx(\"p\",{className:\"body-text\",children:\"\".concat(mintedSoFar,\"/\").concat(TOTAL_MINT_COUNT,\" NFTs minted so far!\")})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{className:\"cta-button connect-wallet-button\",children:/*#__PURE__*/_jsx(\"a\",{className:\"body-text\",href:OPENSEA_LINK,target:\"_blank\",children:\"\\uD83C\\uDF0A View Collection on OpenSea\"})})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"div\",{children:isLoading?/*#__PURE__*/_jsx(Loading,{}):\"\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"footer-container\",children:[/*#__PURE__*/_jsx(\"img\",{alt:\"Twitter Logo\",className:\"twitter-logo\",src:twitterLogo}),/*#__PURE__*/_jsx(\"a\",{className:\"footer-text\",href:TWITTER_LINK,target:\"_blank\",rel:\"noreferrer\",children:\"@\".concat(TWITTER_HANDLE)})]})]})});};export default App;","map":{"version":3,"sources":["/Users/swanagan/projects/stoic-traits/src/App.jsx"],"names":["React","useEffect","useState","ethers","Loading","myEpicNft","twitterLogo","OPENSEA_LINK","TOTAL_MINT_COUNT","TWITTER_LINK","TWITTER_HANDLE","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","mintedSoFar","setMintedSoFar","isLoading","setIsLoading","checkIfWalletIsConnected","window","ethereum","console","log","request","method","accounts","length","account","setupEventListener","chainId","rinkebyChainId","alert","connectWallet","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","on","from","tokenId","toNumber","error","askContractToMintNft","makeAnEpicNFT","nftTxn","wait","hash","getTotalNFTsMintedSoFar","nft","renderNotConnectedContainer","fireSomeFunctions","renderMintUI"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './styles/App.css';\nimport { ethers } from 'ethers';\nimport { Loading } from 'react-loading-dot';\nimport myEpicNft from './utils/MyEpicNFT.json';\nimport twitterLogo from './assets/twitter-logo.svg';\n\nconst OPENSEA_LINK ='https://testnets.opensea.io/collection/stoicnft-eimjddcifq';\nconst TOTAL_MINT_COUNT = 55;\nconst TWITTER_LINK = 'https://twitter.com/Swanagan';\nconst TWITTER_HANDLE = 'eewatchguy.eth';\n\n// I moved the contract address to the top for easy access.\nconst CONTRACT_ADDRESS = '0x9905Bf40e406E44f436f60A8b08BfeF667Ac6C1a';\n\nconst App = () => {\n\tconst [currentAccount, setCurrentAccount] = useState('');\n\tconst [mintedSoFar, setMintedSoFar] = useState('0');\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst checkIfWalletIsConnected = async () => {\n\t\tconst { ethereum } = window;\n\n\t\tif (!ethereum) {\n\t\t\tconsole.log('Make sure you have metamask!');\n\t\t\treturn;\n\t\t} else {\n\t\t\tconsole.log('We have the ethereum object', ethereum);\n\t\t}\n\n\t\tconst accounts = await ethereum.request({ method: 'eth_accounts' });\n\n\t\tif (accounts.length !== 0) {\n\t\t\tconst account = accounts[0];\n\t\t\tconsole.log('Found an authorized account:', account);\n\t\t\tsetCurrentAccount(account);\n\n\t\t\t// Setup listener! This is for the case where a user comes to our site\n\t\t\t// and ALREADY had their wallet connected + authorized.\n\t\t\tsetupEventListener();\n\t\t} else {\n\t\t\tconsole.log('No authorized account found');\n\t\t}\n\t\tlet chainId = await ethereum.request({ method: 'eth_chainId' });\n\t\tconsole.log('Connected to chain ' + chainId);\n\n\t\t// String, hex code of the chainId of the Rinkebey test network\n\t\tconst rinkebyChainId = '0x4';\n\t\tif (chainId !== rinkebyChainId) {\n\t\t\talert('You are not connected to the Rinkeby Test Network!');\n\t\t}\n\t};\n\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\talert('Get MetaMask!');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({\n\t\t\t\tmethod: 'eth_requestAccounts'\n\t\t\t});\n\n\t\t\tconsole.log('Connected', accounts[0]);\n\t\t\tsetCurrentAccount(accounts[0]);\n\n\t\t\t// Setup listener! This is for the case where a user comes to our site\n\t\t\t// and connected their wallet for the first time.\n\t\t\tsetupEventListener();\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\t// Setup our listener.\n\tconst setupEventListener = async () => {\n\t\t// Most of this looks the same as our function askContractToMintNft\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (ethereum) {\n\t\t\t\t// Same stuff again\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst connectedContract = new ethers.Contract(\n\t\t\t\t\tCONTRACT_ADDRESS,\n\t\t\t\t\tmyEpicNft.abi,\n\t\t\t\t\tsigner\n\t\t\t\t);\n\n\t\t\t\t// THIS IS THE MAGIC SAUCE.\n\t\t\t\t// This will essentially \"capture\" our event when our contract throws it.\n\t\t\t\t// If you're familiar with webhooks, it's very similar to that!\n\t\t\t\tconnectedContract.on('NewEpicNFTMinted', (from, tokenId) => {\n\t\t\t\t\tconsole.log(from, tokenId.toNumber());\n\t\t\t\t\talert(\n\t\t\t\t\t\t`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tconsole.log('Setup event listener!');\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst askContractToMintNft = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst connectedContract = new ethers.Contract(\n\t\t\t\t\tCONTRACT_ADDRESS,\n\t\t\t\t\tmyEpicNft.abi,\n\t\t\t\t\tsigner\n\t\t\t\t);\n\n        setIsLoading(true);\n\t\t\t\tconsole.log('Going to pop wallet now to pay gas...');\n\t\t\t\tlet nftTxn = await connectedContract.makeAnEpicNFT();\n\n\t\t\t\tconsole.log('Mining...please wait.');\n\t\t\t\tawait nftTxn.wait();\n\t\t\t\tconsole.log(nftTxn);\n\t\t\t\tconsole.log(\n\t\t\t\t\t`Mined, see transaction: https://rinkeby.etherscan.io/tx/${\n\t\t\t\t\t\tnftTxn.hash\n\t\t\t\t\t}`\n\t\t\t\t);\n        setIsLoading(false);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst getTotalNFTsMintedSoFar = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst connectedContract = new ethers.Contract(\n\t\t\t\t\tCONTRACT_ADDRESS,\n\t\t\t\t\tmyEpicNft.abi,\n\t\t\t\t\tsigner\n\t\t\t\t);\n\t\t\t\tlet nft = await connectedContract.getTotalNFTsMintedSoFar();\n\t\t\t\tsetMintedSoFar(nft.toNumber());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch(error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\t\n\tuseEffect(() => {\n\t\tcheckIfWalletIsConnected();\n\t}, []);\n\n\tconst renderNotConnectedContainer = () => (\n\t\t<button\n\t\t\tonClick={connectWallet}\n\t\t\tclassName=\"cta-button connect-wallet-button\"\n\t\t>\n\t\t\tConnect to Wallet\n\t\t</button>\n\t);\n\n\tconst fireSomeFunctions = () => (\n\t\taskContractToMintNft(), getTotalNFTsMintedSoFar()\n\t);\n\n\tconst renderMintUI = () => (\n\t\t<button\n\t\t\tonClick={fireSomeFunctions}\n\t\t\tclassName=\"cta-button connect-wallet-button\"\n\t\t>\n\t\t\tMint NFT\n\t\t</button>\n\t);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"header-container\">\n\t\t\t\t\t<p className=\"header gradient-text\">Stoic Traits NFT</p>\n\t\t\t\t\t<p className=\"sub-text\">\n\t\t\t\t\t\tEach unique. Each stoic. Discover your NFT today.\n\t\t\t\t\t</p>\n\t\t\t\t\t{currentAccount === ''\n\t\t\t\t\t\t? renderNotConnectedContainer()\n\t\t\t\t\t\t: renderMintUI()}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"body-container\">\n\t\t\t\t\t<p className=\"body-text\">{`${mintedSoFar}/${TOTAL_MINT_COUNT} NFTs minted so far!`}</p>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button className=\"cta-button connect-wallet-button\">\n\t\t\t\t\t\t<a className=\"body-text\" href={OPENSEA_LINK} target=\"_blank\">\n\t\t\t\t\t\t\t🌊 View Collection on OpenSea\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n        <div>\n          <div>{isLoading ? <Loading /> : ``}</div>\n        </div>\n\t\t\t\t<div className=\"footer-container\">\n\t\t\t\t\t<img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName=\"footer-text\"\n\t\t\t\t\t\thref={TWITTER_LINK}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>{`@${TWITTER_HANDLE}`}</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}