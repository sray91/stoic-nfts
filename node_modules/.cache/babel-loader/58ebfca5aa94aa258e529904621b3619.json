{"ast":null,"code":"var _jsxFileName = \"/Users/swanagan/projects/stoic-traits/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './styles/App.css';\nimport { ethers } from 'ethers';\nimport { Loading } from 'react-loading-dot';\nimport myEpicNft from './utils/MyEpicNFT.json';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OPENSEA_LINK = 'https://testnets.opensea.io/collection/stoicnft-eimjddcifq';\nconst TOTAL_MINT_COUNT = 55;\nconst TWITTER_LINK = 'https://twitter.com/Swanagan';\nconst TWITTER_HANDLE = 'eewatchguy.eth'; // I moved the contract address to the top for easy access.\n\nconst CONTRACT_ADDRESS = '0x9905Bf40e406E44f436f60A8b08BfeF667Ac6C1a';\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [mintedSoFar, setMintedSoFar] = useState('0');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log('Make sure you have metamask!');\n      return;\n    } else {\n      console.log('We have the ethereum object', ethereum);\n    }\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log('Found an authorized account:', account);\n      setCurrentAccount(account); // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n\n      setupEventListener();\n    } else {\n      console.log('No authorized account found');\n    }\n\n    let chainId = await ethereum.request({\n      method: 'eth_chainId'\n    });\n    console.log('Connected to chain ' + chainId); // String, hex code of the chainId of the Rinkebey test network\n\n    const rinkebyChainId = '0x4';\n\n    if (chainId !== rinkebyChainId) {\n      alert('You are not connected to the Rinkeby Test Network!');\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]); // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Setup our listener.\n\n\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer); // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n\n        connectedContract.on('NewEpicNFTMinted', (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log('Setup event listener!');\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        setIsLoading(true);\n        console.log('Going to pop wallet now to pay gas...');\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log('Mining...please wait.');\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        setIsLoading(false);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getTotalNFTsMintedSoFar = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        let nft = await connectedContract.getTotalNFTsMintedSoFar();\n        setMintedSoFar(nft.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  });\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 3\n  }, this);\n\n  const fireSomeFunctions = () => (askContractToMintNft(), getTotalNFTsMintedSoFar());\n\n  const renderMintUI = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: fireSomeFunctions,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Mint NFT\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 3\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"Stoic Traits NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Each unique. Each stoic. Discover your NFT today.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 6\n        }, this), currentAccount === '' ? renderNotConnectedContainer() : renderMintUI()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body-container\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"body-text\",\n          children: `${mintedSoFar}/${TOTAL_MINT_COUNT} NFTs minted so far!`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button connect-wallet-button\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            className: \"body-text\",\n            href: OPENSEA_LINK,\n            target: \"_blank\",\n            children: \"\\uD83C\\uDF0A View Collection on OpenSea\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: isLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 29\n          }, this) : ``\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `@${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"ELDI5OEvhKn5CqTc52U3N8rVE1I=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/swanagan/projects/stoic-traits/src/App.jsx"],"names":["React","useEffect","useState","ethers","Loading","myEpicNft","twitterLogo","OPENSEA_LINK","TOTAL_MINT_COUNT","TWITTER_LINK","TWITTER_HANDLE","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","mintedSoFar","setMintedSoFar","isLoading","setIsLoading","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","setupEventListener","chainId","rinkebyChainId","alert","connectWallet","error","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","on","from","tokenId","toNumber","askContractToMintNft","nftTxn","makeAnEpicNFT","wait","hash","getTotalNFTsMintedSoFar","nft","renderNotConnectedContainer","fireSomeFunctions","renderMintUI"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './styles/App.css';\nimport { ethers } from 'ethers';\nimport { Loading } from 'react-loading-dot';\nimport myEpicNft from './utils/MyEpicNFT.json';\nimport twitterLogo from './assets/twitter-logo.svg';\n\nconst OPENSEA_LINK ='https://testnets.opensea.io/collection/stoicnft-eimjddcifq';\nconst TOTAL_MINT_COUNT = 55;\nconst TWITTER_LINK = 'https://twitter.com/Swanagan';\nconst TWITTER_HANDLE = 'eewatchguy.eth';\n\n// I moved the contract address to the top for easy access.\nconst CONTRACT_ADDRESS = '0x9905Bf40e406E44f436f60A8b08BfeF667Ac6C1a';\n\nconst App = () => {\n\tconst [currentAccount, setCurrentAccount] = useState('');\n\tconst [mintedSoFar, setMintedSoFar] = useState('0');\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst checkIfWalletIsConnected = async () => {\n\t\tconst { ethereum } = window;\n\n\t\tif (!ethereum) {\n\t\t\tconsole.log('Make sure you have metamask!');\n\t\t\treturn;\n\t\t} else {\n\t\t\tconsole.log('We have the ethereum object', ethereum);\n\t\t}\n\n\t\tconst accounts = await ethereum.request({ method: 'eth_accounts' });\n\n\t\tif (accounts.length !== 0) {\n\t\t\tconst account = accounts[0];\n\t\t\tconsole.log('Found an authorized account:', account);\n\t\t\tsetCurrentAccount(account);\n\n\t\t\t// Setup listener! This is for the case where a user comes to our site\n\t\t\t// and ALREADY had their wallet connected + authorized.\n\t\t\tsetupEventListener();\n\t\t} else {\n\t\t\tconsole.log('No authorized account found');\n\t\t}\n\t\tlet chainId = await ethereum.request({ method: 'eth_chainId' });\n\t\tconsole.log('Connected to chain ' + chainId);\n\n\t\t// String, hex code of the chainId of the Rinkebey test network\n\t\tconst rinkebyChainId = '0x4';\n\t\tif (chainId !== rinkebyChainId) {\n\t\t\talert('You are not connected to the Rinkeby Test Network!');\n\t\t}\n\t};\n\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\talert('Get MetaMask!');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({\n\t\t\t\tmethod: 'eth_requestAccounts'\n\t\t\t});\n\n\t\t\tconsole.log('Connected', accounts[0]);\n\t\t\tsetCurrentAccount(accounts[0]);\n\n\t\t\t// Setup listener! This is for the case where a user comes to our site\n\t\t\t// and connected their wallet for the first time.\n\t\t\tsetupEventListener();\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\t// Setup our listener.\n\tconst setupEventListener = async () => {\n\t\t// Most of this looks the same as our function askContractToMintNft\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (ethereum) {\n\t\t\t\t// Same stuff again\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst connectedContract = new ethers.Contract(\n\t\t\t\t\tCONTRACT_ADDRESS,\n\t\t\t\t\tmyEpicNft.abi,\n\t\t\t\t\tsigner\n\t\t\t\t);\n\n\t\t\t\t// THIS IS THE MAGIC SAUCE.\n\t\t\t\t// This will essentially \"capture\" our event when our contract throws it.\n\t\t\t\t// If you're familiar with webhooks, it's very similar to that!\n\t\t\t\tconnectedContract.on('NewEpicNFTMinted', (from, tokenId) => {\n\t\t\t\t\tconsole.log(from, tokenId.toNumber());\n\t\t\t\t\talert(\n\t\t\t\t\t\t`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tconsole.log('Setup event listener!');\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst askContractToMintNft = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst connectedContract = new ethers.Contract(\n\t\t\t\t\tCONTRACT_ADDRESS,\n\t\t\t\t\tmyEpicNft.abi,\n\t\t\t\t\tsigner\n\t\t\t\t);\n\n        setIsLoading(true);\n\t\t\t\tconsole.log('Going to pop wallet now to pay gas...');\n\t\t\t\tlet nftTxn = await connectedContract.makeAnEpicNFT();\n\n\t\t\t\tconsole.log('Mining...please wait.');\n\t\t\t\tawait nftTxn.wait();\n\t\t\t\tconsole.log(nftTxn);\n\t\t\t\tconsole.log(\n\t\t\t\t\t`Mined, see transaction: https://rinkeby.etherscan.io/tx/${\n\t\t\t\t\t\tnftTxn.hash\n\t\t\t\t\t}`\n\t\t\t\t);\n        setIsLoading(false);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst getTotalNFTsMintedSoFar = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst connectedContract = new ethers.Contract(\n\t\t\t\t\tCONTRACT_ADDRESS,\n\t\t\t\t\tmyEpicNft.abi,\n\t\t\t\t\tsigner\n\t\t\t\t);\n\t\t\t\tlet nft = await connectedContract.getTotalNFTsMintedSoFar();\n\t\t\t\tsetMintedSoFar(nft.toNumber());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch(error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\t\n\tuseEffect(() => {\n\t\tcheckIfWalletIsConnected();\n\t});\n\n\tconst renderNotConnectedContainer = () => (\n\t\t<button\n\t\t\tonClick={connectWallet}\n\t\t\tclassName=\"cta-button connect-wallet-button\"\n\t\t>\n\t\t\tConnect to Wallet\n\t\t</button>\n\t);\n\n\tconst fireSomeFunctions = () => (\n\t\taskContractToMintNft(), getTotalNFTsMintedSoFar()\n\t);\n\n\tconst renderMintUI = () => (\n\t\t<button\n\t\t\tonClick={fireSomeFunctions}\n\t\t\tclassName=\"cta-button connect-wallet-button\"\n\t\t>\n\t\t\tMint NFT\n\t\t</button>\n\t);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"header-container\">\n\t\t\t\t\t<p className=\"header gradient-text\">Stoic Traits NFT</p>\n\t\t\t\t\t<p className=\"sub-text\">\n\t\t\t\t\t\tEach unique. Each stoic. Discover your NFT today.\n\t\t\t\t\t</p>\n\t\t\t\t\t{currentAccount === ''\n\t\t\t\t\t\t? renderNotConnectedContainer()\n\t\t\t\t\t\t: renderMintUI()}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"body-container\">\n\t\t\t\t\t<p className=\"body-text\">{`${mintedSoFar}/${TOTAL_MINT_COUNT} NFTs minted so far!`}</p>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button className=\"cta-button connect-wallet-button\">\n\t\t\t\t\t\t<a className=\"body-text\" href={OPENSEA_LINK} target=\"_blank\">\n\t\t\t\t\t\t\t🌊 View Collection on OpenSea\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n        <div>\n          <div>{isLoading ? <Loading /> : ``}</div>\n        </div>\n\t\t\t\t<div className=\"footer-container\">\n\t\t\t\t\t<img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName=\"footer-text\"\n\t\t\t\t\t\thref={TWITTER_LINK}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>{`@${TWITTER_HANDLE}`}</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}